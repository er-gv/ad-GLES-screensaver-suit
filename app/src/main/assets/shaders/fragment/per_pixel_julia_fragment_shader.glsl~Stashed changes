
precision mediump float;       	// Set the default precision to medium. We don't need as high of a
// precision in the fragment shader.
uniform vec3 u_LightPos;       	// The position of the light in eye space.
uniform sampler2D u_Sampler;    // The input texture.
uniform vec4 u_Color;          	// This is the color from the vertex shader
                                // interpolated across the face per fragment.
uniform vec3 u_Normal;
uniform mat4 u_MVMatrix;		// A constant representing the combined model/view matrix.

uniform vec2 u_julia_seed;

varying vec3 v_Position;		// Interpolated position for this fragment.

//varying vec3 v_Normal;        // Interpolated normal for this fragment.
varying vec2 v_TexCoordinate;   // Interpolated texture coordinate per fragment.
varying vec2 v_flat_pos;

//project a 3d vector on the xy plane

bool julia_test(vec2 c, vec2 z, float threshold){

    int i;
    int max_itr = 20;
    float dist;
    for (i=0; i<max_itr; i++) {
        float x = (z.x * z.x - z.y * z.y)+c.x;
        float y = 2.0f*(z.y * z.x)+c.y;
        dist = x * x + y * y;
        if (dist > threshold){
            break;
        }//
        c.x = x;
        c.y = y;
    }
    return (i== max_itr);
}

// The entry point for our fragment shader.
void main()
{

    // Will be used for attenuation.
    float distance = length(u_LightPos - v_Position);

    // Get a lighting direction vector from the light to the vertex.
    vec3 lightVector = normalize(u_LightPos - v_Position);

    // Calculate the dot product of the light vector and vertex normal. If the normal and light vector are
    // pointing in the same direction then it will get max illumination.
    float diffuse = max(dot(vec3(u_MVMatrix*vec4(u_Normal, 0.0f)), lightVector), 0.0);

    // Add attenuation.
    diffuse = diffuse * (1.0 / (1.0 + (0.10 * distance)));

    // Add ambient lighting
    diffuse = diffuse + 0.3;

    bool res = julia_test(v_flat_pos, v_flat_pos, 9.0f);
    if(false==res){
        gl_FragColor = vec4(1.0f,1.0f,1.0f,1.0f);
    }
    else {
        gl_FragColor = u_Color * texture2D(u_Sampler, v_TexCoordinate);// *normelizedDist;
    }
}

